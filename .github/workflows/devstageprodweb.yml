name: Terraform CI/CD

on:
  push:
    paths:
        - 'oving8/web/**'
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  WORKING_DIR: ./oving8/web

jobs:
  dev_stage:
    runs-on: ubuntu-22.04
    outputs:
      destroyed: ${{ steps.conditional_destroy.outputs.destroyed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform workspace select or create dev
        run: terraform workspace select dev || terraform workspace new dev
        working-directory: ${{ env.WORKING_DIR }}

       #Sjekker om skal kjøre destroy, før noe annet kjøres 
      - name: Get Commit Message
        id: commit
        run: echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: 'Conditional Destroy'
        id: conditional_destroy
        run: |
          echo "Commit message: ${{ steps.commit.outputs.message }}"
          if [[ "${{ steps.commit.outputs.message }}" == *"destroy"* ]]; then
            echo "Destroy keyword found. Destroying infra..."
            terraform destroy -auto-approve
            echo "destroyed=true" >> $GITHUB_OUTPUT
          else
            echo "destroyed=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: Terraform apply dev
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: Test dev
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

  stage_prod:
    needs: dev_stage
    #if: needs.dev_stage.outputs.destroyed == 'false'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform workspace select or create stage
        run: terraform workspace select stage || terraform workspace new stage
        working-directory: ${{ env.WORKING_DIR }}

        #Sjekker om skal kjøre destroy, før noe annet kjøres 
      - name: Get Commit Message
        id: commit
        run: echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: 'Conditional Destroy'
        id: conditional_destroy
        run: |
          echo "Commit message: ${{ steps.commit.outputs.message }}"
          if [[ "${{ steps.commit.outputs.message }}" == *"destroy"* ]]; then
            echo "Destroy keyword found. Destroying infra..."
            terraform destroy -auto-approve
            echo "destroyed=true" >> $GITHUB_OUTPUT
          else
            echo "destroyed=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: Terraform apply stage
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: Test stage
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

  prod:
    needs: stage_prod
    #if: needs.stage_prod.outputs.destroyed == 'false'
    runs-on: ubuntu-22.04
    environment: 
      name: production
      url: ${{ steps.get_web_endpoint.outputs.WEB_ENDPOINT }} #resetter verdi fra stage og henter verdi for web URL for prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      
      - name: Terraform init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        
      - name: Terraform workspace select or create prod
        run: terraform workspace select prod || terraform workspace new prod
        working-directory: ${{ env.WORKING_DIR }}

      #Sjekker om skal kjøre destroy, før noe annet kjøres 
      - name: Get Commit Message
        id: commit
        run: echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: 'Conditional Destroy'
        id: conditional_destroy
        run: |
          echo "Commit message: ${{ steps.commit.outputs.message }}"
          if [[ "${{ steps.commit.outputs.message }}" == *"destroy"* ]]; then
            echo "Destroy keyword found. Destroying infra..."
            terraform destroy -auto-approve
            echo "destroyed=true" >> $GITHUB_OUTPUT
          else
            echo "destroyed=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: Terraform apply prod
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}
     
      - name: Test prod
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

      
      - name: Terraform apply prod
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}

      - name: Test prod
        if: steps.conditional_destroy.outputs.destroyed == 'false'
        run: curl $(terraform output -raw primary_web_endpoint)
        working-directory: ${{ env.WORKING_DIR }}

      - name: Get Web Endpoint
        id: get_web_endpoint
        run: echo "WEB_ENDPOINT=$(terraform output -raw primary_web_endpoint)" 
        working-directory: ${{ env.WORKING_DIR }}
